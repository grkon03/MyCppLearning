// generated by chatGPT...

#include <fstream>
#include <stdexcept>
#include <cstdint>
#include <string>
#include <iostream>
#include "mnist.hpp"

namespace MCLSamples::mnist
{
    // バイナリファイルから4バイト整数をビッグエンディアンとして読み取る
    static uint32_t readBigEndianUint32(std::ifstream &ifs)
    {
        unsigned char bytes[4];
        if (!ifs.read(reinterpret_cast<char *>(bytes), 4))
            throw std::runtime_error("Failed to read 4 bytes");

        return (static_cast<uint32_t>(bytes[0]) << 24) |
               (static_cast<uint32_t>(bytes[1]) << 16) |
               (static_cast<uint32_t>(bytes[2]) << 8) |
               static_cast<uint32_t>(bytes[3]);
    }

    // 汎用MNIST読み込み関数
    Dataset loadMNIST(const std::string &imageFile, const std::string &labelFile)
    {
        std::ifstream imgifs(imageFile, std::ios::binary);
        if (!imgifs)
            throw std::runtime_error("Failed to open image file: " + imageFile);

        std::ifstream labifs(labelFile, std::ios::binary);
        if (!labifs)
            throw std::runtime_error("Failed to open label file: " + labelFile);

        // 画像ファイルヘッダ
        uint32_t magicImages = readBigEndianUint32(imgifs);
        if (magicImages != 2051)
            throw std::runtime_error("Invalid image file magic number");

        uint32_t numImages = readBigEndianUint32(imgifs);
        uint32_t numRows = readBigEndianUint32(imgifs);
        uint32_t numCols = readBigEndianUint32(imgifs);

        if (numRows != Image::rows || numCols != Image::cols)
            throw std::runtime_error("Unexpected image size");

        // ラベルファイルヘッダ
        uint32_t magicLabels = readBigEndianUint32(labifs);
        if (magicLabels != 2049)
            throw std::runtime_error("Invalid label file magic number");

        uint32_t numLabels = readBigEndianUint32(labifs);
        if (numLabels != numImages)
            throw std::runtime_error("Image count and label count mismatch");

        // Dataset構築
        Dataset dataset;
        dataset.noImages = numImages;
        dataset.images = new Image[numImages];

        for (size_t i = 0; i < numImages; ++i)
        {
            if (!imgifs.read(reinterpret_cast<char *>(dataset.images[i].data), Image::rows * Image::cols))
                throw std::runtime_error("Failed to read image data");

            unsigned char labelByte;
            if (!labifs.read(reinterpret_cast<char *>(&labelByte), 1))
                throw std::runtime_error("Failed to read label data");

            dataset.images[i].label = static_cast<int>(labelByte);
        }

        return dataset;
    }

    // train データ読み込み
    Dataset loadTrain()
    {
        return loadMNIST("data/train-images-idx3-ubyte", "data/train-labels-idx1-ubyte");
    }

    // test データ読み込み
    Dataset loadTest()
    {
        return loadMNIST("data/t10k-images-idx3-ubyte", "data/t10k-labels-idx1-ubyte");
    }
}